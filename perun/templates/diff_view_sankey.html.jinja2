{% import 'macros_profile_overview.html.jinja2' as profile_overview %}
{% import 'macros_html_widgets.html.jinja2' as widgets %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <script type="text/javascript" charset="utf8" src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src='https://cdn.plot.ly/plotly-2.30.0.min.js'></script>
    <style>
        html {
            font-family: "Courier New", Courier, monospace;
        }
        .column {
            width: 48%;
            margin: 0 1%;
        }
        .left {
            float: left;
        }
        .right {
            float: right;
        }
        .middle {
            width: 98%;
            float: left;
            margin: 0 1%;
            justify-content: center;
        }
        .column-head {
            border-bottom: 1px solid #ddd;
            border-top: 1px solid #ddd;
            text-align: center;
        }

        div.tools table {
            border-collapse: collapse;
            border-bottom: 1px solid #ddd;
            margin: 0 auto 0 auto;
        }

        div.tools td.value {
            padding: 1em 0.5em;
            text-align: left;
        }

        div.tools td.key {
            padding: 1em 0.5em;
            text-align: right;
            font-weight: bold;
        }
        div.tools td.topkey {
            padding: 0;
            padding-top: 1em;
            text-align: center;
            font-weight: bold;
        }
        {{ profile_overview.css_style() }}
        {{ widgets.chip_list_style() }}
        {{ widgets.range_picker_style() }}
    </style>
</head>
<body>

<div class="left column">
    <h2 class="column-head">{{ lhs_tag }}</h2>
    {{ profile_overview.overview_table('toggleLeftCollapse', 'left-info', lhs_header, rhs_header) }}
    <div style="margin: 0 10px;">&nbsp;</div>
</div>

<div class="right column">
    <h2 class="column-head">{{ rhs_tag }}</h2>
    {{ profile_overview.overview_table('toggleRightCollapse', 'right-info', rhs_header, lhs_header) }}
    <div style="margin: 0 10px;">&nbsp;</div>
</div>

<div class="middle">
    <div class="tools">
        <div class="left column">
            <table>
                <tbody>
                    {{ widgets.radios([('v', 'Vertical'), ('h', 'Horizontal')], 'position_radios', 'positions', 'Orientation') }}
                    {{ widgets.radios([('snap', 'Reorder'), ('fixed', 'Select')], 'mode_radios', 'modes', 'Mode') }}
                </tbody>
            </table>
        </div>
        <div class="right column">
            <table>
                <tbody>
                    <tr>
                        <td class="key" style="width: 20%;">Threshold:</td>
                        <td colspan="3">{{ widgets.range_picker() }}</td>
                    </tr>
                    {{ widgets.checkboxes([('base', 'Incr (from base)'), ('both', 'Equal'), ('target', 'Decr (from base)')], 'shown_edges', 'Show') }}
                </tbody>
            </table>
        </div>
        {{ widgets.chip_list('shown_functions', 'Filter') }}
        <table>
            <tbody>
            <tr>
                <td class="topkey">Alphabetic Order</td>
                <td class="topkey">Relative Change Order</td>
                <td class="topkey">Absolute Change Order</td>
            </tr>
            <tr>
                <td class="value" title="Displays resources for different uid (sorted lexicographically).">
                    <select class="filter" id="uid_selector_lex">
                        <option value="-1"></option>
                        {% for (i, uid) in uids_lex %}
                            <option value="{{ i }}">{{ uid }}</option>
                        {%- endfor %}
                    </select>
                </td>
                <td class="value" title="Displays resources for different uid (sorted by relative changes).">
                    <select class="filter" id="uid_selector_rel">
                        <option value="-1"></option>
                        {% for (i, uid) in uids_rel %}
                            <option value="{{ i }}">{{ uid }}</option>
                        {%- endfor %}
                    </select>
                </td>
                <td class="value" title="Displays resources for different uid (sorted by absolute changes).">
                    <select class="filter" id="uid_selector_abs">
                        <option value="-1"></option>
                        {% for (i, uid) in uids_abs %}
                            <option value="{{ i }}">{{ uid }}</option>
                        {%- endfor %}
                    </select>
                </td>
            </tr>
            </tbody>
        </table>
    </div>

   <div id="sankey_graph"><!-- DO NOT CHANGE: SANKEY GRAPH IS RENDERED HERE--></div>
</div>

<script>
    var data = [],
        filtered_nodes = [],
        steps = [1],
        layout = {},
        selected_uid = -1,
        selected_uid_text = "",
        plot = document.getElementById('sankey_graph');

    {{ profile_overview.toggle_script('toggleLeftCollapse', 'left-info') }}
    {{ profile_overview.toggle_script('toggleRightCollapse', 'right-info') }}
    {{ widgets.add_to_chip_list() }}
    {{ widgets.checkbox_handler() }}
    {{ widgets.get_radio_handler('getPosition', 'positions') }}
    {{ widgets.get_radio_handler('getMode', 'modes') }}
    {{ widgets.range_handlers() }}

    function getData(index) {
        var data = {
            type: "sankey",
            arrangement: getMode(),
            orientation: getPosition(),
            node: {
                pad: 15,
                thickness: 20,
                line: {
                    color: "black",
                    width: 1
                },
                label: graphs[index].label.slice(),
                color: graphs[index].node_colors.slice(),
                customdata: graphs[index].node_uids.slice(),
            },
            link: {
                source: graphs[index].source.slice(),
                target: graphs[index].target.slice(),
                value: graphs[index].value.slice(),
                color: graphs[index].color.slice()
            }
        }
        return [data]
    }

    function reselectData() {
        if (selected_uid === -1)
            return
        data = getData(selected_uid);
        filtered_nodes = [];
        steps = Array.from(new Set(data[0].link.value)).sort((a, b) => a - b);
        layout = {
            title: selected_uid_text,
            font: {
                size: 14
            },
            height: 200 + graphs[selected_uid].width* 100,
        };

        var fromSlider = document.getElementById('fromSlider');
        var toSlider = document.getElementById('toSlider');

        fromSlider.min = graphs[selected_uid].min;
        fromSlider.max = graphs[selected_uid].max + 1;
        fromSlider.value = graphs[selected_uid].min;
        toSlider.min = graphs[selected_uid].min;
        toSlider.max = graphs[selected_uid].max + 1;
        toSlider.value = graphs[selected_uid].max;

        var fromInput = document.getElementById('fromInput');
        var toInput = document.getElementById('toInput');

        setInput(fromInput, graphs[selected_uid].min);
        setInput(toInput, graphs[selected_uid].max);

        fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
    }

    function render() {
        Plotly.react('sankey_graph', data, layout);
    }

    function backwardReachableEdges(nodes, source, target) {
        // Create a set of reachable nodes
        const reachable = new Set(nodes);

        // Initialize a queue with the initial nodes
        const queue = [...nodes];

        // Create an object to store visited edges
        const visited = {};

        // Initialize an array to store reachable edges
        const reachableEdges = [];

        // Perform BFS
        while (queue.length > 0) {
            const currentNode = queue.shift();

            // Find all edges connected to the current node
            for (let i = 0; i < source.length; i++) {
                if (target[i] === currentNode && !visited[i]) {
                    visited[i] = true;
                    const nextNode = source[i];

                    // Check if the next node is reachable
                    if (!reachable.has(nextNode)) {
                        reachable.add(nextNode);
                        queue.push(nextNode);
                    }

                    // Add the edge to the list of reachable edges
                    reachableEdges.push(i);
                }
            }
        }

        return reachableEdges;
    }
    function forwardReachableEdges(nodes, source, target) {
        // Create a set of reachable nodes
        const reachable = new Set(nodes);

        // Initialize a queue with the initial nodes
        const queue = [...nodes];

        // Create an object to store visited edges
        const visited = {};

        // Initialize an array to store reachable edges
        const reachableEdges = [];

        // Perform BFS
        while (queue.length > 0) {
            const currentNode = queue.shift();

            // Find all edges connected to the current node
            for (let i = 0; i < source.length; i++) {
                if (source[i] === currentNode && !visited[i]) {
                    visited[i] = true;
                    const nextNode = target[i];

                    // Check if the next node is reachable
                    if (!reachable.has(nextNode)) {
                        reachable.add(nextNode);
                        queue.push(nextNode);
                    }

                    // Add the edge to the list of reachable edges
                    reachableEdges.push(i);
                }
            }
        }

        return reachableEdges;
    }

    var graphs = [
    {% for graph in sankey_graphs %}
        {
            label: {{ graph.label }},
            node_uids: {{ graph.node_uids }},
            node_colors: {{ graph.node_colors }},
            source: {{ graph.source }},
            target: {{ graph.target }},
            value: {{ graph.value }},
            color: {{ graph.color }},
            height: {{ graph.height }},
            width: {{ graph.width }},
            min: {{ graph.min }},
            max: {{ graph.max }},
        },
    {%- endfor %}
    ]

    document.querySelectorAll('select.filter').forEach((el) => {
        el.addEventListener('change', () => {
            selected_uid = el.value;
            selected_uid_text = el.options[el.selectedIndex];
            reselectData();
            filterEdges();
            render();
        })
    });

    document.querySelectorAll('input[name="positions"]').forEach((button) => {
       button.addEventListener('change', () => {
          if (button.checked) {
              data[0].orientation = getPosition();
              render();
          }
       });
    });

    document.querySelectorAll('input[name="modes"]').forEach((button) => {
        button.addEventListener('change', () => {
            if (button.checked) {
                data[0].arrangement = getMode();
                render();
            }
        });
    });

    function restoreEdges() {
        data[0].link = {
            source: graphs[selected_uid].source.slice(),
            target: graphs[selected_uid].target.slice(),
            value: graphs[selected_uid].value.slice(),
            color: graphs[selected_uid].color.slice()
        }
    }

    function filterEdgesByValue() {
        const fromInput = document.querySelector('#fromInput').value;
        const toInput = document.querySelector('#toInput').value;
        for (let i = data[0].link.color.length - 1; i >= 0; i--) {
            if (data[0].link.value[i] > toInput || data[0].link.value[i] < fromInput) {
                data[0].link.source.splice(i, 1);
                data[0].link.target.splice(i, 1);
                data[0].link.value.splice(i, 1);
                data[0].link.color.splice(i, 1);
            }
        }
    }

    function filterEdgesByReachable() {
        if (filtered_nodes.length !== 0) {
            fwdEdges = forwardReachableEdges(filtered_nodes, data[0].link.source, data[0].link.target);
            var s = [], t = [], v = [], c = [];
            for (let i = data[0].link.color.length - 1; i >= 0; i--) {
                s.push(data[0].link.source[fwdEdges[i]]);
                t.push(data[0].link.target[fwdEdges[i]]);
                v.push(data[0].link.value[fwdEdges[i]]);
                c.push(data[0].link.color[fwdEdges[i]]);
            }
            data[0].link.source = s;
            data[0].link.target = t;
            data[0].link.value = v;
            data[0].link.color = c;
        }
    }

    function filterEdgesByColor(color) {
        for (let i = data[0].link.color.length - 1; i >= 0; i--) {
            if (data[0].link.color[i] === color) {
                data[0].link.source.splice(i, 1);
                data[0].link.target.splice(i, 1);
                data[0].link.value.splice(i, 1);
                data[0].link.color.splice(i, 1);
            }
        }
    }

    function filterEdges() {
        restoreEdges()
        if(!isChecked("base")) {
            filterEdgesByColor("rgba(255, 0, 0, 0.4)")
        }
        if(!isChecked("target")) {
            filterEdgesByColor("rgba(0, 255, 0, 0.4)")
        }
        if(!isChecked("both")) {
            filterEdgesByColor("rgba(0, 0, 255, 0.4)")
        }
        filterEdgesByValue();
        filterEdgesByReachable();
        render();
    }


    document.querySelector('input[name="base"]').addEventListener('change', filterEdges);
    document.querySelector('input[name="target"]').addEventListener('change', filterEdges);
    document.querySelector('input[name="both"]').addEventListener('change', filterEdges);
    document.querySelector('#fromSlider').addEventListener('change', filterEdges);
    document.querySelector('#toSlider').addEventListener('change', filterEdges);

    plot.on('plotly_click', function(idata) {
        filtered_nodes = [];
        var tagList = document.getElementById('shown_functions');
        tagList.querySelectorAll('div').forEach((el) => {
            tagList.removeChild(el);
        });
        var tag = idata.points[0].customdata;
        for (let i = 0; i < data[0].node.customdata.length; i++) {
            if (data[0].node.customdata[i] === tag) {
                filtered_nodes.push(i);
                break;
            }
        }
        addTag('shown_functions', tag);
        filterEdges();
    });
</script>

</body>
</html>
