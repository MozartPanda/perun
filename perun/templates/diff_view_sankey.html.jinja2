{% import 'macros_profile_overview.html.jinja2' as profile_overview %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <script type="text/javascript" charset="utf8" src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src='https://cdn.plot.ly/plotly-2.30.0.min.js'></script>
    <style>
        html {
            font-family: "Courier New", Courier, monospace;
        }
        .column {
            width: 48%;
            margin: 0 1%;
        }
        .left {
            float: left;
        }
        .right {
            float: right;
        }
        .middle {
            width: 98%;
            float: left;
            margin: 0 1%;
            justify-content: center;
        }
        .column-head {
            border-bottom: 1px solid #ddd;
            border-top: 1px solid #ddd;
            text-align: center;
        }

        div.tools table {
            border-collapse: collapse;
            border-bottom: 1px solid #ddd;
            margin: 0 auto 2em auto;
        }

        div.tools td.value {
            padding: 1em 0.5em;
            text-align: left;
        }

        div.tools td.key {
            padding: 1em 0.5em;
            text-align: right;
            font-weight: bold;
        }
        {{ profile_overview.css_style() }}
    </style>
</head>
<body>

<div class="left column">
    <h2 class="column-head">{{ lhs_tag }}</h2>
    {{ profile_overview.overview_table('toggleLeftCollapse', 'left-info', lhs_header, rhs_header) }}
    <div style="margin: 0 10px;">&nbsp;</div>
</div>

<div class="right column">
    <h2 class="column-head">{{ rhs_tag }}</h2>
    {{ profile_overview.overview_table('toggleRightCollapse', 'right-info', rhs_header, lhs_header) }}
    <div style="margin: 0 10px;">&nbsp;</div>
</div>

<div class="middle">
    <div class="tools">
        <table>
            <tbody>
            <tr>
                <td class="key" title="Displays resources for different uid.">Function:</td>
                <td class="value" title="Displays resources for different uid.">
                    <select class="filter" id="uid_selector">
                        {% for uid in uids %}
                            <option value="{{ loop.index0 }}">{{ uid }}</option>
                        {%- endfor %}
                    </select>
                </td>
            </tr>
            </tbody>
        </table>
    </div>

   <div id="sankey_graph"><!-- DO NOT CHANGE: SANKEY GRAPH IS RENDERED HERE--></div>
</div>

<script>
    {{ profile_overview.toggle_script('toggleLeftCollapse', 'left-info') }}
    {{ profile_overview.toggle_script('toggleRightCollapse', 'right-info') }}

    function getData(index) {
        var data = {
            type: "sankey",
            orientation: "v",
            node: {
                pad: 10,
                thickness: 10,
                line: {
                    color: "black",
                    width: 1
                },
                label: graphs[index].label,
            },
            link: {
                source: graphs[index].source,
                target: graphs[index].target,
                value: graphs[index].value,
                color: graphs[index].color
            }
        }
        return [data]
    }
    function render() {
        const selected_uid = document.querySelector("#uid_selector").value
        data = getData(selected_uid);

        var layout = {
            title: "{{ title }}",
            font: {
                size: 14
            },
            height: 200 + graphs[selected_uid].width* 100,
        };

        Plotly.react('sankey_graph', data, layout);
    }

    var graphs = [
    {% for graph in sankey_graphs %}
        {
            label: {{ graph.label }},
            source: {{ graph.source }},
            target: {{ graph.target }},
            value: {{ graph.value }},
            color: {{ graph.color }},
            height: {{ graph.height }},
            width: {{ graph.width }},
        },
    {%- endfor %}
    ]

    render();

    document.querySelectorAll('select.filter').forEach((el) => {
        el.addEventListener('change', () => {
            render()
        })
    });
</script>

</body>
</html>
