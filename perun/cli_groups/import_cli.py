"""Group of CLI commands used for importing profiles"""

from __future__ import annotations

# Standard Imports
from typing import Any

# Third-Party Imports
import click

# Perun Imports
from perun.logic import commands


@click.group("import")
@click.pass_context
def import_group(ctx: click.Context, **kwargs: Any) -> None:
    """Imports Perun profiles from different formats"""
    commands.try_init()
    ctx.obj = kwargs


@import_group.group("perf")
@click.pass_context
def perf_group(ctx: click.Context, **kwargs: Any) -> None:
    """Imports Perun profiles from perf results

    This supports either profiles collected in:

      1. Binary format: e.g., `collected.data` files, that are results of `perf record`
      2. Text format: result of `perf script` that parses the binary into user-friendly and parsing-frinedly text format
    """
    ctx.obj.update(kwargs)


@perf_group.command("record")
def from_binary(_: click.Context) -> None:
    """Imports Perun profiles from binary generated by `perf record` command"""


@perf_group.command("output")
def from_text(_: click.Context) -> None:
    """Import Perun profiles from output generated by `perf script` command"""
